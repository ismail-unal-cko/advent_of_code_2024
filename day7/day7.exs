defmodule Day7 do
  # Parse the input from the file
  def parse_input(file_path) do
    File.read!(file_path)
    |> String.split("\n", trim: true)
    |> Enum.map(&parse_line/1)
  end

  # Parse each line into {target, numbers}
  defp parse_line(line) do
    [target_str, numbers_str] = String.split(line, ": ", parts: 2)
    target = String.to_integer(target_str)
    numbers = String.split(numbers_str, " ") |> Enum.map(&String.to_integer/1)
    {target, numbers}
  end

  # Generate all possible results for the given numbers
  def possible_results(numbers) do
    calculate_all(numbers, [])
  end

  # Recursively calculate all possible results
  defp calculate_all([x], acc), do: [x | acc]
  defp calculate_all([x, y | rest], acc) do
    new_acc = Enum.flat_map(acc, fn val -> [val + y, val * y] end)
    |> Enum.concat([x + y, x * y])

    calculate_all([x | rest], new_acc)
  end

  # Check if the test value can be generated by the numbers
  def can_match?(target, numbers) do
    target in possible_results(numbers)
  end

  # Solve the problem
  def solve(file_path) do
    file_path
    |> parse_input()
    |> Enum.filter(fn {target, numbers} -> can_match?(target, numbers) end)
    |> Enum.map(fn {target, _} -> target end)
    |> Enum.sum()
  end
end

# Execute the solution
IO.puts Day7.solve("input.txt")
